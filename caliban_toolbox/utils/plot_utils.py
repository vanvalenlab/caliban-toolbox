# Copyright 2016-2020 David Van Valen at California Institute of Technology
# (Caltech), with support from the Paul Allen Family Foundation, Google,
# & National Institutes of Health (NIH) under Grant U24CA224309-01.
# All rights reserved.
#
# Licensed under a modified Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.github.com/vanvalenlab/deepcell-toolbox/LICENSE
#
# The Work provided may be used for non-commercial academic purposes only.
# For any other use of the Work, including commercial use, please contact:
# vanvalenlab@gmail.com
#
# Neither the name of Caltech nor the names of its contributors may be used
# to endorse or promote products derived from this software without specific
# prior written permission.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
from __future__ import absolute_import
from __future__ import print_function
from __future__ import division

import numpy as np


def overlay_grid_lines(overlay_img, row_starts, row_ends, col_starts, col_ends):
    """Visualize the location of image crops on the original uncropped image to assess crop size

    Args:
        overlay_img: original image [rows x cols] that crops will overlaid onto
        row_starts: vector of start indices generated by crop_multichannel_data
        row_ends: vector of end indices generated by crop_multichannel_data
        col_starts: vector of start indices generated by crop_multichannel_data
        col_ends: vector of end indices generated by crop_multichannel_data

    Returns:
        numpy.array: original image overlaid with the crop borders
    """

    # get dimensions of the image
    row_len = overlay_img.shape[0]
    col_len = overlay_img.shape[1]

    # if first start position is 0, we won't plot it since it's on the image border
    if row_starts[0] == 0:
        row_starts = row_starts[1:]
    if col_starts[0] == 0:
        col_starts = col_starts[1:]

    # use distance between start index of crop 1 and end index of crop 0 determine overlap amount
    row_sep = row_ends[0] - row_starts[0]
    col_sep = col_ends[0] - col_starts[0]

    # generate a vector of alternating 0s and im_max for a dotted line
    val = np.max(overlay_img)
    dotted = [0, 0, 0, 0, val, val, val, val]
    side = np.max(overlay_img.shape)
    dotted = dotted * side

    # trim dotted vectors to be same length as respective image dimension
    row_dotted = np.expand_dims(np.array(dotted[:row_len]), axis=-1)
    col_dotted = np.expand_dims(np.array(dotted[:col_len]), axis=0)

    # expand the thickness to 3 pixel width for better visualization
    row_starts = row_starts + [x + 1 for x in row_starts] + [x + 2 for x in row_starts]
    row_ends = [x + row_sep for x in row_starts]

    # define the location of each image to be halfway between the overlap boundary on either side
    row_middle = [int(x + (row_sep / 2)) for x in row_starts]

    # same for columns
    col_starts = col_starts + [x + 1 for x in col_starts] + [x + 2 for x in col_starts]
    col_middle = [int(x + (col_sep / 2)) for x in col_starts]
    col_ends = [x + col_sep for x in col_starts]

    # set the values of start and end indices to be dotted lines
    overlay_img[row_starts, :] = col_dotted
    overlay_img[row_ends, :] = col_dotted
    overlay_img[:, col_starts] = row_dotted
    overlay_img[:, col_ends] = row_dotted

    # set the values of the line delineating image crop to be constant value
    overlay_img[row_middle, :] = val
    overlay_img[:, col_middle] = val

    return overlay_img


def overlay_crop_overlap(img_crop, row_starts, row_ends, col_starts, col_ends):
    """Visualize degree of overlap between adjacent crops by plotting overlap regions

    Args:
        img_crop: example crop to use for plotting overlap
        row_starts: vector of start indices generated by crop_multichannel_data
        row_ends: vector of end indices generated by crop_multichannel_data
        col_starts: vector of start indices generated by crop_multichannel_data
        col_ends: vector of end indices generated by crop_multichannel_data

    Returns:
        numpy.array: example crop with dotted lines superimposed
                     on location of adjacent overlapping crops
    """

    # get image dimensions
    row_len, col_len = img_crop.shape[0], img_crop.shape[1]

    # compute amount of overlap on each axis
    row_overlap = row_ends[0] - row_starts[1]
    col_overlap = col_ends[0] - col_starts[1]

    # generate vector to super-impose dotted line
    val = np.max(img_crop)
    dotted = [0, 0, 0, 0, val, val, val, val]
    side = np.max(img_crop.shape)
    dotted = dotted * side

    # trim dotted vectors to be same length as respective sides of image
    row_dotted = dotted[:row_len]
    col_dotted = np.expand_dims(np.array(dotted[:col_len]), axis=-1)

    # overlay the dotted vectors on the original image at locations of overlap
    img_crop[[row_overlap, row_len - row_overlap], :] = row_dotted
    img_crop[:, [col_overlap, col_len - col_overlap]] = col_dotted

    return img_crop


def set_channel_colors(combined_xr, plot_colors):
    """Modifies the order of image channels so they're displayed with appropriate color in caliban

    Args:
        combined_xr: xarray containing channels and labels
        plot_colors: array containing the color of each channel, in order of the current channels

    Returns:
        xarray.DataArray: reordered image data to enable visualization in caliban
    """

    # first define the order that channels are visualize
    channel_order = np.array(['red', 'green', 'blue', 'cyan',
                              'magenta', 'yellow', 'segmentation_label'])

    # create the array holding the final ordering of channel names
    final_channel_names = np.array(['red', 'green', 'blue', 'cyan', 'magenta',
                                    'yellow', 'segmentation_label'], dtype='<U20')

    # make sure supplied plot_colors exist as available channels
    if not np.all(np.isin(plot_colors, channel_order)):
        raise ValueError('supplied plot_colors not valid, must be one of: '
                         '{}'.format(channel_order[:-1]))

    # make sure all imaging channels have a plot_color
    if len(plot_colors) != combined_xr.shape[-1] - 1:
        raise ValueError('Mismatch between number of imaging channels and supplied plot colors')

    channel_names = combined_xr.channels.values

    # loop through each of the supplied plot colors
    for idx in range(len(plot_colors)):
        # get the position of that plot color in the channel order
        final_idx = np.isin(channel_order, plot_colors[idx])

        # assign the channel corresponding to that color to that position in the final ordering
        final_channel_names[final_idx] = channel_names[idx]

    # figure out which channels contain real data, don't substitute these with a blank tif
    non_blank_channels = final_channel_names[np.isin(final_channel_names,
                                                     combined_xr.channels.values)]

    # reorder the xarray
    reordered_xr = data_utils.reorder_xarray_channels(channel_order=final_channel_names,
                                                      channel_xr=combined_xr,
                                                      non_blank_channels=non_blank_channels)

    return reordered_xr
